buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.1"
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    classpath 'ch.raffael.pegdown-doclet:pegdown-doclet:1.3'
    classpath 'org.owasp:dependency-check-gradle:1.4.5.1'
  }
}

repositories {
  mavenCentral()
}

apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'ch.raffael.pegdown-doclet'
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'

allprojects {
  version = '0.4.0-rc1'
  group = 'com.nedap.healthcare.archie'
  ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
  //archivesBaseName = 'archie'
}

subprojects {
  apply plugin: 'java'
  apply from: "${gradleScriptDir}/publish-maven.gradle"  
 // plugins {
   //   id 'com.github.ben-manes.versions' version '0.13.0'
 // }

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  def artifactoryUserMethod = hasProperty('artifactoryUser') ? artifactoryUser : ""
  def artifactoryPasswordMethod = hasProperty('artifactoryPassword') ? artifactoryPassword : ""
  def ossrhUsernameSafe = ossrhUsername//hasProperty('ossrhUsername') ? ossrhUsername : ""
  def ossrhPasswordSafe = ossrhPassword//hasProperty('ossrhPassword') ? ossrhPassword : ""

  apply plugin: 'maven-publish'
  apply plugin: "com.jfrog.artifactory"
  apply plugin: 'ch.raffael.pegdown-doclet'
  apply plugin: 'jacoco'
  apply plugin: 'org.owasp.dependencycheck'


  repositories {
      mavenCentral()
  }

  ext.reflectionsVersion = '0.9.11'
  ext.jacksonVersion = '2.9.2'

  dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'

    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    compile 'com.google.guava:guava:23.2-jre'

    compile "org.reflections:reflections:${reflectionsVersion}"
    compile 'com.esotericsoftware:kryo:4.0.1' //for easy and relatively fast object cloning

    compile('commons-io:commons-io:2.4'){
      exclude group: 'commons-logging', module: 'commons-logging'
    }
    compile('commons-lang:commons-lang:2.6')

    testCompile 'junit:junit:4.12'
    testCompile 'org.slf4j:slf4j-simple:1.7.25'
  }


  javadoc {
      options.encoding = 'UTF-8'
  }

  //configure the jar files: sources and javaod
  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
      classifier = 'sources'
      from sourceSets.main.allSource
  }

  artifacts {
      archives javadocJar, sourcesJar
  }

  
  signing {
      sign configurations.archives
  }
  

  def generatedSources = ["**/com/nedap/archie/adlparser/antlr**"]

  test {
    jacoco {
      excludes = generatedSources
    }
     testLogging {
        events "failed"
        exceptionFormat "full"
    }
  }

  jacocoTestReport {
      doFirst {
            classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(generatedSources)
      }
      reports {
          xml.enabled = true
          html.enabled = true
      }
      sourceSets sourceSets.main
      //do not check the generated source 
  }

  check.dependsOn jacocoTestReport

  //upload to sonatype configuration
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsernameSafe, password: ossrhPasswordSafe)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsernameSafe, password: ossrhPasswordSafe)
        }

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      }
    }
  }

  //nexusStaging {  
  //    username = ossrhUserSafe
  //    password = ossrhPasswordSafe
  //}


  publishing {
      publications {
          mavenJava(MavenPublication) {
              from components.java
          }
      }
  }

  artifactory {
    //sorry about the private repository. Once we release a version, this will change to something public
      contextUrl = 'https://nedap.artifactoryonline.com/nedap/'
      publish {
          repository {
              repoKey = 'libs-snapshots-local'
              username = "${artifactoryUserMethod}"
              password = "${artifactoryPasswordMethod}"
              maven = true

          }       
          defaults {
              publications ('mavenJava')
          }
      }
  }
  artifactoryPublish.dependsOn 'generatePomFileForMavenJavaPublication', 'build'

}







